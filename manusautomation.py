# -*- coding: utf-8 -*-
"""ManusAutomation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14RSxtBmWaI5HZSgx0AKTY-i6Xr4RgZeO
"""

import pandas as pd

df = pd.DataFrame(pd.read_excel("sample.xlsx"))
# df

neededColumns = ['Number', 'Correlation ID', 'Legal Entity', 'Short description',
       'Created', 'Planned start date', 'Planned end date', 'Risk', 'Impact',
       'Assignment Group', 'State', 'Assigned To', 'Type',
       'CAB Approval Group']



for column in df.keys():
    if column not in neededColumns:
        df.drop( column, axis=1, inplace=True )

ageingOrder = [ 'less than 30 days', '30-59 days', '60-90 days', 'more than 90 days', 'more than 1 year' ]
ageingOrder

def categorize_ageing(days):
    if days < 30:
        return 'less than 30 days'
    elif 30 <= days < 60:
        return '30-59 days'
    elif 60 <= days < 90:
        return '60-90 days'
    elif 90 <= days < 365:
        return 'more than 90 days'
    else:
        return 'more than 1 year'

from datetime import datetime

# Get the current date and time
current_datetime = datetime.now()

df['Planned end date'] = pd.to_datetime(df['Planned end date'])

# Calculate the difference in days
df['Ageing'] = (current_datetime - df['Planned end date']).dt.days

# df

df['Ageing bucket'] = df['Ageing'].apply(categorize_ageing)
df.drop( 'Ageing', axis=1, inplace=True )

# df



def getKeyedbyAssignedTo(df):
    keyedByAssignedTo = {}

    assignedTo = df.groupby(['Assigned To'])
    # Iterate through the groups and print each one
    for name, group in assignedTo:
        # print(f"Assigned To: {name}")
        # print( group )
        stateGroup = group.groupby( ['State'] )
        stateDicts = {}
        for stateName, state in stateGroup:
            # print(f"State: {stateName}")
            # print( state)
            # stateDicts[ stateName[0] ] = len(state)
            ageingGroup = state.groupby( ['Ageing bucket'] )
            ageingDicts = {}
            for ageingBucket, ageing in ageingGroup:
                # print(f"Ageing: {ageingBucket}")
                # print( ageing)
                ageingDicts[ ageingBucket[0] ] = len(ageing)
            stateDicts[ stateName[0] ] = ageingDicts
        keyedByAssignedTo[ name[0] ] = stateDicts
    # print( keyedByAssignedTo )
    return keyedByAssignedTo

# getKeyedbyAssignedTo( df )

def getKeyedbyState(df):
    keyedByState = {}

    assignedTo = df.groupby(['State'])
    # Iterate through the groups and print each one
    for name, group in assignedTo:
        # print(f"Assigned To: {name}")
        # print( group )
        stageGroup = group.groupby( ['Assigned To'] )
        stateDicts = {}
        for stateName, state in stageGroup:
            # print(f"State: {stateName}")
            # print( len(state) )
            # stateDicts[ stateName ] = len(state)
            ageingGroup = state.groupby( ['Ageing bucket'] )
            ageingDicts = {}
            for ageingBucket, ageing in ageingGroup:
                # print(f"Ageing: {ageingBucket}")
                # print( ageing)
                ageingDicts[ ageingBucket[0] ] = len(ageing)
            stateDicts[ stateName[0] ] = ageingDicts
        keyedByState[ name[0] ] = stateDicts
    print( keyedByState )
    return keyedByState
# getKeyedbyState(df)

def getValidAgeingBuckets( keyedByAssignedTo ):
    validAgeingBuckets = []
    for assignedTo, assignedToDict in keyedByAssignedTo.items():
        for stateName, ageingBuckets in assignedToDict.items():
            for ageingBucket in ageingBuckets:
                if ageingBucket not in validAgeingBuckets:
                    validAgeingBuckets.append( ageingBucket )
    finalValid = []
    for bucket in ageingOrder:
        if bucket in validAgeingBuckets:
            finalValid.append( bucket )

    return finalValid
# getValidAgeingBuckets( getKeyedbyAssignedTo(df) )

# pivot_table = pd.pivot_table(df,
#                                  index=[ 'Assigned To', 'State'],
#                                  columns=['Ageing bucket'],
#                                  values=['Number'],
#                                  aggfunc='size',
#                              fill_value = 0,
#                              )
# pivot_table

# count_code = '<td style="overflow:hidden;padding:2px 3px;vertical-align:bottom;text-align:right">{}</td>'

# print( count_code.format(1) )

def addColumns( validBuckets ):
    html = ''
    # RowLable
    html += '<tr height="17" style="height: 12.5pt;"> <td height="17" class="gmail-xl65" width="115" style="height:12.5pt;width:86pt;font-size:10pt;color:black;font-weight:700;font-family:Arial,sans-serif;border-width:0.5pt;border-style:solid;border-color:windowtext windowtext rgb(140,181,249);background:rgb(217,231,253);padding-top:1px;padding-right:1px;padding-left:1px;vertical-align:bottom">Assigned To</td>'
    # Ageing Columns
    ageingColumnHtml = '<td class="gmail-xl65" width="117" style="width:88pt;font-size:10pt;color:black;font-weight:700;font-family:Arial,sans-serif;border-width:0.5pt;border-style:solid;border-color:windowtext windowtext rgb(140,181,249);background:rgb(217,231,253);padding-top:1px;padding-right:1px;padding-left:1px;vertical-align:bottom">{}</td>'
    for ageingBucket in validBuckets:
        html += ageingColumnHtml.format( ageingBucket )
    # GrandTotal
    html += '<td class="gmail-xl65" width="81" style="width:61pt;font-size:10pt;color:black;font-weight:700;font-family:Arial,sans-serif;border-width:0.5pt;border-style:solid;border-color:windowtext windowtext rgb(140,181,249);background:rgb(217,231,253);padding-top:1px;padding-right:1px;padding-left:1px;vertical-align:bottom">Grand Total</td>'
    return html

def getKeyedbyAssignedToAgeingCount(df):
    keyedByAssignedTo = {}

    assignedTo = df.groupby(['Assigned To'])
    # Iterate through the groups and print each one
    for name, group in assignedTo:
        print(f"Assigned To: {name}")
        # print( group )
        ageingGroup = group.groupby( ['Ageing bucket'] )
        ageingDicts = {}
        for ageingBucket, ageing in ageingGroup:
            # print(f"Ageing: {ageingBucket}")
            # print( ageing)
            ageingDicts[ ageingBucket[0] ] = len(ageing)
        keyedByAssignedTo[ name[0] ] = ageingDicts
    # print( keyedByAssignedTo )
    return keyedByAssignedTo

# getKeyedbyAssignedToAgeingCount( df )

def addAssignedToRow( assignedTo, assignedToDict, ageingCount, validBuckets ):
    html = f'<tr height="17" style="height: 12.5pt;"><td height="17" class="gmail-xl66" style="height:12.5pt;font-size:10pt;color:black;font-weight:700;font-family:Arial,sans-serif;border-bottom:none;border-right:0.5pt solid windowtext;border-top:0.5pt solid rgb(140,181,249);border-left:0.5pt solid windowtext;padding-top:1px;padding-right:1px;padding-left:1px;vertical-align:bottom">{assignedTo}</td>'
    agengTotalHtml = '<td class="gmail-xl67" align="right" style="font-size:10pt;color:black;font-weight:700;font-family:Arial,sans-serif;border-bottom:none;border-right:0.5pt solid windowtext;border-top:0.5pt solid rgb(140,181,249);border-left:0.5pt solid windowtext;padding-top:1px;padding-right:1px;padding-left:1px;vertical-align:bottom">{}</td>'
    total = 0
    for ageingBucket in validBuckets:
        if ageingBucket in ageingCount.keys():
            html += agengTotalHtml.format( ageingCount[ageingBucket] )
            total += ageingCount[ageingBucket]
        else:
            html += agengTotalHtml.format( '' )
    # TODO add grand total
    html += f'<td class="gmail-xl67" align="right" style="font-size:10pt;color:black;font-weight:700;font-family:Arial,sans-serif;border-bottom:none;border-right:0.5pt solid windowtext;border-top:0.5pt solid rgb(140,181,249);border-left:0.5pt solid windowtext;padding-top:1px;padding-right:1px;padding-left:1px;vertical-align:bottom">{total}</td>'
    html += '</tr>'

    # Add perState Row
    stateAgeingCountHtml = '<td class="gmail-xl67" style="border-left:none;border-top:none;border-right:0.5pt solid windowtext;border-bottom:none;padding-top:1px;padding-right:1px;padding-left:1px;color:black;font-size:10pt;font-family:Arial;vertical-align:bottom"></td>{}</td>'
    for stateName in [ 'Scheduled', 'Implement', 'Review' ]:
        if stateName not in assignedToDict.keys():
            continue
        ageingBuckets = assignedToDict[stateName]
    # for stateName, ageingBuckets in assignedToDict.items():
        html += '<tr height="17" style="height: 12.5pt;">'
        html += f'<td height="17" class="gmail-xl68" style="height:12.5pt;border-top:none;border-right:0.5pt solid windowtext;border-bottom:none;border-left:0.5pt solid windowtext;padding-left:18px;padding-top:1px;padding-right:1px;color:black;font-size:10pt;font-family:Arial;vertical-align:bottom">{stateName}</td>'
        for ageingBucket in validBuckets:
            if ageingBucket in ageingBuckets.keys():
                html += stateAgeingCountHtml.format( ageingBuckets[ageingBucket] )
            else:
                html += stateAgeingCountHtml.format( '' )
    return html

def addGrandTotalRow( keyedbyAssignedToAgeingCount, validBuckets ):
    html = '<tr height="17" style="height: 12.5pt;"> <td height="17" class="gmail-xl69" style="height:12.5pt;font-size:10pt;color:black;font-weight:700;font-family:Arial,sans-serif;border-width:0.5pt;border-style:solid;border-color:rgb(140,181,249) windowtext windowtext;background:rgb(217,231,253);padding-top:1px;padding-right:1px;padding-left:1px;vertical-align:bottom">Grand Total</td>'
    ageingTotalHtml = '<td class="gmail-xl70" align="right" style="font-size:10pt;color:black;font-weight:700;font-family:Arial,sans-serif;border-width:0.5pt;border-style:solid;border-color:rgb(140,181,249) windowtext windowtext;background:rgb(217,231,253);padding-top:1px;padding-right:1px;padding-left:1px;vertical-align:bottom">{}</td>'
    grandTotal = 0
    for ageingBucket in validBuckets:
        ageingBucketTotal = 0
        for assignedTo, ageingCount in keyedbyAssignedToAgeingCount.items():
            if ageingBucket in ageingCount.keys():
                ageingBucketTotal += ageingCount[ageingBucket]
        html += ageingTotalHtml.format( ageingBucketTotal )
        grandTotal += ageingBucketTotal
    html += ageingTotalHtml.format( grandTotal )
    html += '</tr>'
    return html

def createPivotHtml( df ):
  keyedByAssignedTo = getKeyedbyAssignedTo(df)
  validBuckets = getValidAgeingBuckets( keyedByAssignedTo )
  keyedbyAssignedToAgeingCount = getKeyedbyAssignedToAgeingCount( df )
  # print( keyedByAssignedTo )
  # print( validBuckets )

  finalHtml = '<table border="0" cellpadding="0" cellspacing="0" width="353" style="border-collapse: collapse; width: 265pt;"> <colgroup> <col width="115" style="width: 86pt;"> <col width="117" style="width: 88pt;"> <col width="40" style="width: 30pt;"> <col width="81" style="width: 61pt;"> </colgroup> <tbody>'
  finalHtml += addColumns( validBuckets )

  for assignedTo, assignedToDict in keyedByAssignedTo.items():
      finalHtml += addAssignedToRow( assignedTo, assignedToDict, keyedbyAssignedToAgeingCount[assignedTo], validBuckets )
      # print( assignedTo, assignedToDict )

  finalHtml += addGrandTotalRow( keyedbyAssignedToAgeingCount, validBuckets )


  finalHtml += '</tbody> </table>'

  print(finalHtml)
# createPivotHtml(df)

assignedGroupGroup = df.groupby(['Assignment Group'])

# Iterate through the groups and print each one
for assignmentGroup, assignmentGroupDf in assignedGroupGroup:
    # print(f"Assignment Group: {assignmentGroup}")
    createPivotHtml( assignmentGroupDf )
    # TODO create pivots for each assignment group

# totalHtml = '<div dir="ltr"> <div dir="ltr"> <table cellspacing="0" cellpadding="0" dir="ltr" style="table-layout:fixed;font-size:10pt;font-family:Arial;width:0px"> <colgroup> <col width="100"> <col width="100"> <col width="100"> <col width="100"> <col width="100"> <col width="100"> <col width="100"> </colgroup> <tbody>'
# totalHtml += '<tr style="height:21px"> <td style="border-right:1px solid transparent;overflow:visible;padding:2px 0px;vertical-align:bottom;background-color:rgb(223,228,236);font-style:italic"> <div style="overflow:hidden;width:196px"> <div style="float:left">COUNTA of Number</div> </div> </td> <td style="overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(223,228,236)"></td> <td style="overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(223,228,236);font-style:italic">Ageing bucket</td> <td style="overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(223,228,236)"></td> <td style="overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(223,228,236)"></td> <td style="overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(223,228,236)"></td> <td style="overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(223,228,236)"></td> </tr>'
# totalHtml += '<tr style="height:21px"> <td style="border-bottom:3px solid rgb(128,147,179);overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(223,228,236);font-style:italic">State</td> <td style="border-bottom:3px solid rgb(128,147,179);overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(223,228,236);font-style:italic">Assigned To</td> <td style="border-bottom:3px solid rgb(128,147,179);overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(128,147,179);color:rgb(255,255,255)">&lt; 30</td> <td style="border-bottom:3px solid rgb(128,147,179);overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(128,147,179);color:rgb(255,255,255)">30-59</td> <td style="border-bottom:3px solid rgb(128,147,179);overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(128,147,179);color:rgb(255,255,255)">60-90</td> <td style="border-bottom:3px solid rgb(128,147,179);overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(128,147,179);color:rgb(255,255,255)">&gt; 90</td> <td style="border-bottom:3px solid rgb(128,147,179);overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(128,147,179);color:rgb(255,255,255)">&gt; 1 year</td> <td style="border-bottom:3px solid rgb(128,147,179);overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(128,147,179);color:rgb(255,255,255)">Grand Total</td> </tr>'

# ageingRow = ''
# for state, assignedToDict in keyedByState.items():
#     pstate = state
#     ageingRow += '<tr style="height:21px">'
#     for assignedTo, ageingBuckets in assignedToDict.items():
#         print(state, assignedTo)
#         ageingRow += f'<td style="border-right:1px solid rgb(255,255,255);overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(244,246,248)">{pstate}</td>'
#         ageingRow += f'<td style="border-right:1px solid rgb(255,255,255);overflow:hidden;padding:2px 3px;vertical-align:bottom;background-color:rgb(244,246,248)">{assignedTo}</td>'
#         pstate = ''
#         for ageingBucket in ageingOrder:
#             if ageingBucket not in ageingBuckets.keys():
#                 ageingRow += count_code.format(0)
#             else:
#                 count = ageingBuckets[ ageingBucket ]
#                 ageingRow += count_code.format(count)
#     # print( ageingRow )
# totalHtml += ageingRow
# totalHtml += '</tbody></table><br></div></div>'
# display( HTML( totalHtml ) )
# print( totalHtml )

